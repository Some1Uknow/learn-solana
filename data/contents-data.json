{
   "modules": [
       {
           "id": "week-1",
           "title": "üß± Solana Fundamentals",
           "description": "Understand how Solana works under the hood and interact via CLI",
           "goal": "Master Solana's core architecture and command-line interactions",
           "image": "/solanaLogo.png",
           "icon": "fundamentals",
           "topics": [
               {
                   "id": "blockchain-architecture",
                   "title": "Blockchain Architecture Deep Dive",
                   "description": "Proof of History (PoH), validator networks, epochs, and consensus mechanisms. Understanding accounts vs contracts model",
                   "type": "theory"
               },
               {
                   "id": "devnet-setup",
                   "title": "Development Environment & CLI Tools",
                   "description": "Setting up Solana CLI, configuring clusters, managing keypairs, and understanding the development workflow",
                   "type": "setup"
               },
               {
                   "id": "accounts-lamports-exercise",
                   "title": "Exercise: Accounts & Lamports Exploration",
                   "description": "Hands-on practice creating accounts, transferring lamports, understanding rent and account data structures",
                   "type": "exercise"
               },
               {
                   "id": "transaction-anatomy",
                   "title": "Transaction Structure & Mechanics",
                   "description": "Instruction format, signers, recent blockhash, and transaction lifecycle from creation to confirmation",
                   "type": "theory"
               },
               {
                   "id": "program-interaction-project",
                   "title": "Project: Program Interaction Toolkit",
                   "description": "Build CLI tools to interact with existing Solana programs, inspect account data, and analyze transactions (non-Anchor approach)",
                   "type": "project"
               },
               {
                   "id": "basic-exploration-challenge",
                   "title": "Challenge: Devnet Program Analysis",
                   "description": "Discover and document how existing devnet programs work by analyzing their transactions and account structures",
                   "type": "challenge"
               }
           ]
       },
       {
           "id": "week-2", 
           "title": "ü¶Ä Rust for Solana",
           "description": "Learn Rust deeply enough to write secure, optimized smart contracts",
           "goal": "Master Rust programming with focus on blockchain security and optimization",
           "image": "https://rustacean.net/assets/rustacean-flat-happy.svg",
           "icon": "rust",
           "topics": [
               {
                   "id": "rust-ownership-borrowing",
                   "title": "Ownership, Borrowing & Memory Safety",
                   "description": "Deep dive into Rust's ownership model, borrowing rules, lifetimes, and why they matter for blockchain security",
                   "type": "theory"
               },
               {
                   "id": "result-error-handling",
                   "title": "Result Types & Error Handling",
                   "description": "Mastering Result<T, E>, Option<T>, error propagation with ?, and custom error types for robust programs",
                   "type": "theory"
               },
               {
                   "id": "borsh-serialization",
                   "title": "Borsh Serialization for On-Chain Data",
                   "description": "Understanding binary serialization, custom derive macros, and efficient data packing for blockchain storage",
                   "type": "theory"
               },
               {
                   "id": "counter-program-project",
                   "title": "Project: Basic Counter Program (Raw Rust)",
                   "description": "Build and test a counter program using low-level Solana program structure without Anchor framework",
                   "type": "project"
               },
               {
                   "id": "security-patterns-exercise",
                   "title": "Exercise: Security Patterns Implementation",
                   "description": "Add comprehensive security patterns: input validation, overflow protection, and access controls to counter program",
                   "type": "exercise"
               },
               {
                   "id": "defensive-programming-challenge",
                   "title": "Challenge: Defensive Programming Audit",
                   "description": "Analyze vulnerable program examples and implement defensive programming techniques to prevent common attacks",
                   "type": "challenge"
               },
               {
                   "id": "program-structure-deep-dive",
                   "title": "Low-Level Program Structure Mastery",
                   "description": "Understanding entry points, instruction processing, account validation, and BPF program constraints",
                   "type": "theory"
               }
           ]
       },
       {
           "id": "week-3",
           "title": "‚öì Anchor Framework", 
           "description": "Build real apps using Anchor (Solana's Rust-based smart contract framework)",
           "goal": "Master Anchor for ergonomic and powerful smart contract development",
           "image": "/anchor.png",
           "icon": "anchor",
           "topics": [
               {
                   "id": "anchor-introduction",
                   "title": "Anchor Framework Overview",
                   "description": "Understanding Anchor's benefits: IDL generation, account validation macros, TypeScript client generation, and testing framework",
                   "type": "theory"
               },
               {
                   "id": "spl-token-integration",
                   "title": "SPL Token Integration",
                   "description": "Working with SPL tokens: minting, burning, transfers, associated token accounts, and token metadata",
                   "type": "theory"
               },
               {
                   "id": "token-minting-project",
                   "title": "Project: Token Minting & Management dApp",
                   "description": "Build complete token ecosystem with minting authority, supply management, and holder interactions using Anchor",
                   "type": "project"
               },
               {
                   "id": "pda-seed-derivation",
                   "title": "PDAs & Seed Derivation Mastery",
                   "description": "Program Derived Addresses, seed patterns, bump derivation, and using PDAs for program-controlled accounts",
                   "type": "theory"
               },
               {
                   "id": "escrow-mechanism-project",
                   "title": "Project: Advanced Escrow System",
                   "description": "Build sophisticated escrow with PDAs, conditional releases, multi-party agreements, and time-based unlocking",
                   "type": "project"
               },
               {
                   "id": "cpi-cross-program",
                   "title": "Cross-Program Invocations (CPI)",
                   "description": "Calling other programs, building CPI contexts, authority delegation, and composable program design",
                   "type": "theory"
               },
               {
                   "id": "defi-integration-challenge",
                   "title": "Challenge: DeFi Protocol Integration",
                   "description": "Integrate with existing DeFi protocols using CPI: token swaps, liquidity provision, or yield farming mechanisms",
                   "type": "challenge"
               },
               {
                   "id": "anchor-ergonomics",
                   "title": "Anchor Development Best Practices",
                   "description": "Account constraints, error handling, events, program upgrades, and testing patterns for maintainable code",
                   "type": "theory"
               }
           ]
       },
       {
           "id": "week-4",
           "title": "üßë‚Äçüíª Client-Side & Full-Stack",
           "description": "Integrate smart contracts with React, wallets, and full dApp flows",
           "goal": "Build production-ready frontend applications with seamless blockchain integration",
           "image": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg", 
           "icon": "fullstack",
           "topics": [
               {
                   "id": "web3js-anchor-client",
                   "title": "@solana/web3.js & Anchor IDL Client",
                   "description": "Setting up Connection, Provider, Program instances. Reading accounts, sending transactions, handling confirmations",
                   "type": "theory"
               },
               {
                   "id": "wallet-integration-exercise",
                   "title": "Exercise: Wallet Connect Implementation",
                   "description": "Integrate multiple wallet adapters (Phantom, Solflare, Ledger), handle connection states, and manage user sessions",
                   "type": "exercise"
               },
               {
                   "id": "react-integration-project",
                   "title": "Project: React dApp with Real-Time Updates",
                   "description": "Build responsive React application with wallet integration, account subscriptions, and optimistic UI updates",
                   "type": "project"
               },
               {
                   "id": "ux-enhancements",
                   "title": "UX Enhancement Patterns",
                   "description": "Transaction status indicators, error handling, loading states, confirmation flows, and user feedback systems",
                   "type": "theory"
               },
               {
                   "id": "testing-cicd-setup",
                   "title": "Testing & CI/CD Pipeline",
                   "description": "Unit tests, integration tests, E2E testing with Cypress, GitHub Actions, automated deployment workflows",
                   "type": "theory"
               },
               {
                   "id": "deployment-strategies",
                   "title": "Deployment to Devnet/Mainnet",
                   "description": "Environment configuration, program deployment, frontend hosting, monitoring, and rollback strategies",
                   "type": "theory"
               },
               {
                   "id": "architecture-optimization",
                   "title": "Architecture & Gas Optimization",
                   "description": "Compute unit budgeting, transaction batching, account optimization, and cost-effective design patterns",
                   "type": "theory"
               },
               {
                   "id": "upgrades-maintenance-challenge",
                   "title": "Challenge: Program Upgrades & Maintenance",
                   "description": "Implement upgrade mechanisms, state migration strategies, and backward compatibility for evolving applications",
                   "type": "challenge"
               }
           ]
       },
       {
           "id": "week-5",
           "title": "üöÄ Capstone & Portfolio",
           "description": "Package your skills into a showcase-worthy, production-grade dApp",
           "goal": "Create a professional portfolio piece demonstrating mastery of full Solana development stack",
           "image": "https://solana.com/_next/static/media/logotype-dark.f79d530e.svg",
           "icon": "capstone",
           "topics": [
               {
                   "id": "capstone-planning",
                   "title": "Capstone Project Planning & Architecture",
                   "description": "Requirements gathering, technical architecture design, user flow mapping, and project timeline planning",
                   "type": "planning"
               },
               {
                   "id": "advanced-features-implementation",
                   "title": "Advanced Features Implementation",
                   "description": "Multi-program interactions, complex state management, advanced security patterns, and performance optimizations",
                   "type": "implementation"
               },
               {
                   "id": "fullstack-integration",
                   "title": "Full-Stack Integration & Polish",
                   "description": "Seamless frontend-backend integration, responsive design, accessibility, and professional UI/UX implementation",
                   "type": "implementation"
               },
               {
                   "id": "testing-security-audit",
                   "title": "Comprehensive Testing & Security Audit",
                   "description": "Complete test coverage, security vulnerability assessment, performance testing, and code quality assurance",
                   "type": "quality-assurance"
               },
               {
                   "id": "deployment-production",
                   "title": "Production Deployment",
                   "description": "Deploy full-stack dApp to mainnet/devnet with proper monitoring, analytics, and error tracking systems",
                   "type": "deployment"
               },
               {
                   "id": "documentation-polish",
                   "title": "Documentation & Professional Polish",
                   "description": "User guides, developer documentation, README optimization, video demos, and professional presentation materials",
                   "type": "documentation"
               },
               {
                   "id": "performance-optimization",
                   "title": "Performance Optimization & Scaling",
                   "description": "Gas optimization, caching strategies, CDN setup, database optimization, and scalability preparations",
                   "type": "optimization"
               },
               {
                   "id": "portfolio-presentation",
                   "title": "Portfolio Presentation & Showcase",
                   "description": "Professional portfolio website, case study documentation, technical blog posts, and hiring-ready presentation materials",
                   "type": "showcase"
               }
           ]
       }
   ],
   "learning_progression": {
       "week_1_focus": "Understanding Solana's unique architecture and mastering CLI-based interactions",
       "week_2_focus": "Deep Rust programming skills with security-first mindset for blockchain development",
       "week_3_focus": "Rapid application development using Anchor with real-world DeFi integrations",
       "week_4_focus": "Professional frontend development with seamless blockchain user experiences",
       "week_5_focus": "Portfolio-ready production applications demonstrating full-stack mastery"
   },
   "skill_milestones": {
       "week_1": "Can navigate Solana ecosystem confidently via CLI and understand core architectural differences",
       "week_2": "Can write secure, efficient Rust programs with proper error handling and defensive patterns", 
       "week_3": "Can build complex multi-program applications with token integrations and DeFi interactions",
       "week_4": "Can create production-ready full-stack dApps with professional UX and deployment pipelines",
       "week_5": "Can present a portfolio-quality application demonstrating mastery of entire Solana stack"
   },
   "project_progression": [
       "CLI toolkit for exploring existing Solana programs and transactions",
       "Security-hardened counter program built with raw Rust and comprehensive testing",
       "Multi-feature DeFi application using Anchor with token minting and escrow capabilities", 
       "Full-stack React dApp with wallet integration and real-time blockchain interactions",
       "Production-deployed capstone project with professional documentation and showcase materials"
   ],
   "assessment_criteria": {
       "technical_depth": "Understanding of Solana's unique features and ability to leverage them effectively",
       "security_awareness": "Implementation of security best practices and defensive programming patterns",
       "code_quality": "Clean, maintainable, well-tested code following Solana development standards",
       "user_experience": "Intuitive, responsive frontend with smooth blockchain interaction flows",
       "professional_readiness": "Portfolio-quality documentation, deployment, and presentation materials"
   }
}